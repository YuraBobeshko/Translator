{"version":3,"sources":["src/components/Settings/Settings.js","src/components/Fields/FieldBottomTopLine/styles.js","src/components/Fields/FieldBottomTopLine/index.js","src/components/Fields/FieldBottomTopLine/FieldBottomTopLine.js","src/globalStyles.js","src/hooks/AudioAnalyser.js","src/Main.js","App.js"],"names":["Settings","volum","sensitivityMicrophone","setSensitivityMicrophone","View","Text","readOnly","value","type","min","max","onChange","target","StyleSheet","create","wrapperField","width","height","backgroundColor","block","right","transform","display","justifyContent","alignItems","position","line","zIndex","text","color","fontSize","FieldBottomTopLine","onLose","isPlaying","console","log","fadeAnim","useRef","Animated","Value","current","useEffect","loop","timing","toValue","duration","easing","Easing","linear","usenativedriver","start","refBlock","refLineBottom","refLineTop","getBoundingClientRect","bottom","top","alert","style","styles","ref","interpolate","inputRange","outputRange","flexDirection","AudioAnalyser","data","setData","rafId","audioContext","analyser","dataArray","source","useState","audio","setAudio","tick","getByteFrequencyData","prevHeight","reduce","sum","num","length","getNormalizedValue","requestAnimationFrame","window","AudioContext","webkitAudioContext","createAnalyser","fftSize","Uint8Array","frequencyBinCount","createMediaStreamSource","connect","a","async","navigator","mediaDevices","getUserMedia","video","cancelAnimationFrame","disconnect","Main","useCallback","prevState","Button","onPress","title","globalStyles","toFixed","w","App"],"mappings":"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","file":"static/js/app.41b6bb9d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { View, Text } from \"react-native\";\r\n\r\nconst Settings = ({\r\n  volum,\r\n  sensitivityMicrophone,\r\n  setSensitivityMicrophone,\r\n}) => {\r\n  return (\r\n    <View>\r\n      <Text>{volum}</Text>\r\n      <input readOnly value={volum} type=\"range\" min=\"1\" max=\"255\" />\r\n      <input\r\n        onChange={({ target }) => setSensitivityMicrophone(+target.value)}\r\n        value={sensitivityMicrophone}\r\n        type=\"range\"\r\n        min=\"1\"\r\n        max=\"255\"\r\n      />\r\n      <Text>{sensitivityMicrophone}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport default StyleSheet.create({\r\n  wrapperField: {\r\n    width: 500,\r\n    height: 700,\r\n    backgroundColor: \"yellow\",\r\n  },\r\n  block: {\r\n    width: 100,\r\n    height: 100,\r\n    right: \"50%\",\r\n    transform: \" translate(50%)\",\r\n    backgroundColor: \"#911E42\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    position: \"absolute\",\r\n  },\r\n  line: {\r\n    width: 500,\r\n    height: 10,\r\n    backgroundColor: \"#000\",\r\n    position: \"absolute\",\r\n    zIndex: -1,\r\n  },\r\n  text: {\r\n    color: \"#FFF44F\",\r\n    fontSize: 22,\r\n  },\r\n});\r\n","import FieldBottomTopLine from \"./FieldBottomTopLine\";\r\nexport default FieldBottomTopLine;\r\n","import React, { useEffect, useRef, memo } from \"react\";\r\nimport { View, Text, Animated, Easing } from \"react-native\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nconst FieldBottomTopLine = ({ height, onLose, isPlaying }) => {\r\n  console.log(isPlaying);\r\n  const fadeAnim = useRef(new Animated.Value(0)).current;\r\n\r\n  useEffect(() => {\r\n    Animated.loop(\r\n      Animated.timing(fadeAnim, {\r\n        toValue: 1,\r\n        duration: 2000,\r\n        easing: Easing.linear,\r\n        usenativedriver: true,\r\n      }),\r\n      { usenativedriver: true }\r\n    ).start();\r\n  }, [fadeAnim]);\r\n\r\n  const refBlock = useRef();\r\n  const refLineBottom = useRef();\r\n  const refLineTop = useRef();\r\n\r\n  useEffect(() => {\r\n    if (\r\n      refBlock.current &&\r\n      refLineBottom.current &&\r\n      refLineTop.current &&\r\n      isPlaying\r\n    ) {\r\n      if (\r\n        refLineBottom.current.getBoundingClientRect().bottom >\r\n          refBlock.current.getBoundingClientRect().top ||\r\n        refBlock.current.getBoundingClientRect().bottom >\r\n          refLineTop.current.getBoundingClientRect().top\r\n      ) {\r\n        onLose();\r\n        alert(\"лузер\");\r\n      }\r\n    }\r\n  }, [height]);\r\n\r\n  return (\r\n    <View style={styles.wrapperField}>\r\n      <Animated.View\r\n        ref={refLineBottom}\r\n        style={[\r\n          styles.line,\r\n          {\r\n            top: fadeAnim\r\n              .interpolate({\r\n                inputRange: [0, 1],\r\n                outputRange: [1, 3],\r\n              })\r\n              .interpolate({\r\n                inputRange: [1, 2, 3],\r\n                outputRange: [50, 200, 50],\r\n              }),\r\n          },\r\n        ]}\r\n      />\r\n      <View\r\n        ref={refBlock}\r\n        style={[\r\n          styles.block,\r\n          {\r\n            top: height * 1.5,\r\n          },\r\n        ]}\r\n      >\r\n        <Text style={styles.text}>{height}</Text>\r\n      </View>\r\n      <Animated.View\r\n        ref={refLineTop}\r\n        style={[\r\n          styles.line,\r\n          {\r\n            top: fadeAnim\r\n              .interpolate({\r\n                inputRange: [0, 1],\r\n                outputRange: [1, 3],\r\n              })\r\n              .interpolate({\r\n                inputRange: [1, 2, 3],\r\n                outputRange: [450, 600, 450],\r\n              }),\r\n          },\r\n        ]}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default FieldBottomTopLine;\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nexport default StyleSheet.create({\r\n  wrapperField: { display: \"flex\", flexDirection: \"row\" },\r\n});\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst AudioAnalyser = (data, setData) => {\r\n  const [audio, setAudio] = useState(null);\r\n  let rafId, audioContext, analyser, dataArray, source;\r\n\r\n  // useEffect(() => {\r\n  //   setData((prevState) => ({ ...prevState, height: 200 }));\r\n  // }, [res]);\r\n\r\n  // const getMicrophone = async () => {\r\n  //   const audio = await navigator.mediaDevices.getUserMedia({\r\n  //     audio: true,\r\n  //     video: false,\r\n  //   });\r\n  //   setAudio(audio);\r\n  // };\r\n\r\n  // const stopMicrophone = () => {\r\n  //   audio.getTracks().forEach((track) => track.stop());\r\n  //   setAudio(null);\r\n  // };\r\n\r\n  const getNormalizedValue = (dataArray, sensitivityMicrophone) => {\r\n    const volum =\r\n      dataArray.reduce((sum, num) => sum + num, 0) / dataArray.length;\r\n    const value = volum > sensitivityMicrophone ? -1 : 1;\r\n\r\n    return { value, volum };\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (toggleMicrophone && !audio) {\r\n  //     getMicrophone();\r\n  //   }\r\n  //   if (!toggleMicrophone && audio) {\r\n  //     stopMicrophone();\r\n  //   }\r\n  // }, [toggleMicrophone]);\r\n\r\n  const tick = () => {\r\n    // if (audio.active) {\r\n    analyser.getByteFrequencyData(dataArray);\r\n    setData((prevHeight) => {\r\n      const { value, volum } = getNormalizedValue(\r\n        dataArray,\r\n        prevHeight.sensitivityMicrophone\r\n      );\r\n      const height = prevHeight.isPlaying\r\n        ? prevHeight.height + value\r\n        : prevHeight.height;\r\n\r\n      // if (height > 378 && height < 380) return { height: 378, volum };\r\n      // if (height > -2 && height < 0) return { height: 1, volum };\r\n      return { ...prevHeight, height, volum };\r\n    });\r\n    rafId = requestAnimationFrame(tick);\r\n    // } else {\r\n    //   setData(({ height, volum }) => {\r\n    //     // if (height > 378 && height < 380) return { height: 200, volum };\r\n    //     // if (height > -2 && height < 0) return { height: 200, volum };\r\n    //     return { height, volum };\r\n    //   });\r\n    // }\r\n  };\r\n  useEffect(() => {\r\n    if (audio) {\r\n      audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n      analyser = audioContext.createAnalyser();\r\n      analyser.fftSize = 32;\r\n      // analyser.connect(audioContext.destination);\r\n      dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n      source = audioContext.createMediaStreamSource(audio);\r\n      source.connect(analyser);\r\n      rafId = requestAnimationFrame(tick);\r\n    }\r\n  }, [audio]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const audio = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n        video: false,\r\n      });\r\n\r\n      setAudio(audio);\r\n    })();\r\n\r\n    return () => {\r\n      cancelAnimationFrame(rafId);\r\n      analyser.disconnect();\r\n      source.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return data;\r\n};\r\n\r\nexport default AudioAnalyser;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { Button, View } from \"react-native\";\r\nimport { Settings } from \"./components\";\r\nimport { FieldBottomTopLine } from \"./components/Fields\";\r\nimport globalStyles from \"./globalStyles\";\r\nimport AudioAnalyser from \"./hooks/AudioAnalyser\";\r\n\r\nconst Main = () => {\r\n  const [data, setData] = useState({\r\n    height: 200,\r\n    volum: 1,\r\n    isPlaying: false,\r\n    sensitivityMicrophone: 40,\r\n  });\r\n\r\n  const { height, volum, sensitivityMicrophone, isPlaying } = AudioAnalyser(\r\n    data,\r\n    setData\r\n  );\r\n\r\n  const onLose = useCallback(() => {\r\n    setData((prevState) => ({\r\n      ...prevState,\r\n      height: 200,\r\n      isPlaying: false,\r\n    }));\r\n  });\r\n\r\n  const setSensitivityMicrophone = (sensitivityMicrophone) => {\r\n    setData((prevState) => ({\r\n      ...prevState,\r\n      volum: sensitivityMicrophone,\r\n    }));w\r\n  };\r\n\r\n  const getCurrentField = () => {\r\n    switch (type) {\r\n      case 1:\r\n        return (\r\n          <FieldBottomTopLine\r\n            isPlaying={data.isPlaying}\r\n            height={height}\r\n            onLose={onLose}\r\n          />\r\n        );\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isPlaying && (\r\n        <Button\r\n          onPress={() =>\r\n            setData((prevState) => ({\r\n              ...prevState,\r\n              isPlaying: !prevState.isPlaying,\r\n            }))\r\n          }\r\n          title={isPlaying ? \"pause\" : \"start\"}\r\n        />\r\n      )}\r\n      <View style={globalStyles.wrapperField}>\r\n        <FieldBottomTopLine\r\n          isPlaying={isPlaying}\r\n          height={height}\r\n          onLose={onLose}\r\n        />\r\n        <Settings\r\n          volum={volum.toFixed()}\r\n          sensitivityMicrophone={sensitivityMicrophone}\r\n          setSensitivityMicrophone={setSensitivityMicrophone}\r\n        />\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport Main from \"./src/Main\";\r\n\r\nexport default function App() {\r\n  return <Main />;\r\n}\r\n"],"sourceRoot":""}